package tetris;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Angelgosth
 */
import java.awt.event.*;
import javax.swing.*;
public class Tetris extends javax.swing.JFrame {

    /**
     * Creates new form Tetris
     */
    private view viewTetris = new panel();
    private model modelTetris ;
    private controleur controleurTetris ;
    private Timer timer1;
    public Tetris() {
        
        this.setContentPane(((panel)viewTetris).monPanel);
        this.setExtendedState(Tetris.MAXIMIZED_BOTH); 
       // this.setUndecorated(true);  
        initComponents();
     
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
     
        if(controleurTetris.getType() == 2)
        {
                if (SwingUtilities.isLeftMouseButton(evt)) {
                        if(timer1 != null) timer1.stop();
                        timer1=new Timer(100,new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e){
                            savFile.addRotation(-1);
                            modelTetris.rotationTetrominos(-1);
                        }
                    });
                }
           else if(SwingUtilities.isRightMouseButton(evt)){
               if(timer1 != null) timer1.stop();
               timer1=new Timer(100,new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e){
                            savFile.addRotation(1);
                            modelTetris.rotationTetrominos(1);
                        }
                    });

           }

           timer1.start();
        }
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(controleurTetris.getType() == 2)
        {
            controleurTetris.gestionTouche(evt);
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        
        if(controleurTetris.getType() == 2)
        {
            timer1.stop();
        } 
    }//GEN-LAST:event_formMouseReleased

    public view getView()
    {
        return this.viewTetris;
    }
    
    public controleur getControleur()
    {
        return this.controleurTetris;
    }
    
    public model getModel()
    {
        return this.modelTetris;
    }
    
    
    public void setView(view myView)
    {
        this.viewTetris = myView;
    }
    
    public void setControleur(controleur myCon)
    {
        this.controleurTetris= myCon;
    }
    
    public void setModel(model mod)
    {
        this.modelTetris =  mod;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
