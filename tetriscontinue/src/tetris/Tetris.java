package tetris;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Angelgosth
 */
import java.awt.event.*;
import javax.swing.*;
import static tetris.model.taill_block;
public class Tetris extends javax.swing.JFrame {

    /**
     * Creates new form Tetris
     */
    public static  view viewTetris = new panel();
    public static model modelTetris =new model(viewTetris);
    public static  controleur controleurTetris ;
    private Timer timer1;
    public Tetris() {
        
        this.setContentPane(((panel)viewTetris).monPanel);
        this.setExtendedState(this.MAXIMIZED_BOTH); 
       // this.setUndecorated(true);  
        initComponents();
     
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 669, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 462, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
     
        if(controleurTetris.type == 2)
        {
                if (SwingUtilities.isLeftMouseButton(evt)) {
                        if(timer1 != null) timer1.stop();
                        timer1=new Timer(100,new ActionListener(){
                        public void actionPerformed(ActionEvent e){
                            savFile.addRotation(-1);
                            modelTetris.rotationTetrominos(-1);
                        }
                    });
                }
           else if(SwingUtilities.isRightMouseButton(evt)){
               if(timer1 != null) timer1.stop();
               timer1=new Timer(100,new ActionListener(){
                        public void actionPerformed(ActionEvent e){
                            savFile.addRotation(1);
                            modelTetris.rotationTetrominos(1);
                        }
                    });

           }

           timer1.start();
        }
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(controleurTetris.type == 2)
        {
            controleurTetris.gestionTouche(evt);
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        
        if(controleurTetris.type == 2)
        {
            timer1.stop();
        } 
    }//GEN-LAST:event_formMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        option myOption=new option();
            
        myOption.setVisible(true);
        
                   /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Tetris myTetris = new Tetris();
                System.out.println("Le nom du thread principal est " + Thread.currentThread().getName());
  
                    controleurTetris =new lecteurSeq(modelTetris,"test.sav");
                       // controleurTetris = new souris(modelTetris);
                    myTetris.setVisible(true);  
                    myTetris.controleurTetris.addSavFile("test.sav");
                    myTetris.modelTetris.start();
                    if(controleurTetris.type ==2)
                    {
                        myTetris.modelTetris.timer1=new Timer(500,new ActionListener(){
                            public void actionPerformed(ActionEvent e){
                                modelTetris.deplacerTetrominosY(0,taill_block);
                               savFile.addDesc(0, taill_block);
                            }
                        });
                        myTetris.modelTetris.timer1.start();
                    }
                    if(controleurTetris.type ==1)
                        {
                             myTetris.modelTetris.timer1=new Timer(10,new ActionListener(){
                           public void actionPerformed(ActionEvent e){
                                    controleurTetris.gestionTouche(null);
                                }
                            });
                        myTetris.modelTetris.timer1.start();
                    } 
                
              
            }
        });

        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
